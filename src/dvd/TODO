1)  Make [dvd].language=XX (set default language) work.  User can specify "[dvd].language=en", or other 2-letter language code and we set that language string as the dvd's "default" the same way VLC does and that libdvdnav notes for those functions (dvdnav_*_language_select()) say to do, but it still seems to have no effect.  If we ever get this to work, then [dvd].language will be used to set the default language (for audio, subtitles, and menus).  

(Otherwise, specifying (changing) the language within the DVD menus should now work.

2)  Handle all the "quirky" menus, ie. those that have 0 or 1 (invisible) "buttons" that sometimes pop up briefly between the main menu and the movie / scene that launches after the (often required) delay.  Most are handled well now, but there seem to be a few stubborn outliers with timing issues.  Most DVDs are commercial, priprietary, locked down, and designed by "marketing people" to force you to view all the disclaimers, notices and other silly stuff they want you to see before you can see the content.  I'm trying to make all this work as the DVD authors intended, but some seem to like to do things their own peculiar ways and it's been a long game of playing "whack-a-mole" getting this crap to work for as many as possible.  My priority has been to get the main menus and the "Play Movie" buttons to all work, but many (but not all) of the "Scene" and "Special Feature" options are working too - YMMV!

3)  Button navigation by keyboard bindings.  This will simply require some time and research.

4)  Button highlighting and palettes.  Another area I can find little to no docs or examples on how to implement.  For now, we "highlight" the area of each button with a grey rectangle (if [dvd].highlightbuttons config option is set).

5)  Add subtitles.  I took a brief stab at this, but due to the way we do video / audio queueing (from ffaudio), this is going to be a serious and time-consuming challenge.

6)  Better timing and seek interface.  I've looked into this and found that I am very limited by Audacious's static setting of the song length prior to playback outside the reach of the plugins (Updating Tuple::Length in the plugin does not affect the slider and the dynamic elapsed time display).  HOWEVER, if you select and play one of the subsequent "movie" tracks directly through Faudacious (ie. the "longest track"), the timing slider should work SOMEWHAT as expected.  I say "subsequent" because the "title track" usually contains menus, previews (multiple subtracks) all bundled together and the "length" will be the sum of everything.

7)  Get QT to play nice w/SDL2 so that it won't spew useless warning messages when Fauxdacious -Q is shut down.
